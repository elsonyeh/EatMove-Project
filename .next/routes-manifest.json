{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/delivery/orders/[id]",
      "regex": "^/delivery/orders/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/delivery/orders/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/user/orders/[id]",
      "regex": "^/user/orders/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/user/orders/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/user/restaurant/[id]",
      "regex": "^/user/restaurant/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/user/restaurant/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/delivery/dashboard",
      "regex": "^/delivery/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/delivery/dashboard(?:/)?$"
    },
    {
      "page": "/delivery/settings",
      "regex": "^/delivery/settings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/delivery/settings(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/register",
      "regex": "^/register(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/register(?:/)?$"
    },
    {
      "page": "/restaurant/dashboard",
      "regex": "^/restaurant/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/restaurant/dashboard(?:/)?$"
    },
    {
      "page": "/restaurant/products",
      "regex": "^/restaurant/products(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/restaurant/products(?:/)?$"
    },
    {
      "page": "/restaurant/settings",
      "regex": "^/restaurant/settings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/restaurant/settings(?:/)?$"
    },
    {
      "page": "/user/cart",
      "regex": "^/user/cart(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/user/cart(?:/)?$"
    },
    {
      "page": "/user/checkout",
      "regex": "^/user/checkout(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/user/checkout(?:/)?$"
    },
    {
      "page": "/user/favorites",
      "regex": "^/user/favorites(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/user/favorites(?:/)?$"
    },
    {
      "page": "/user/home",
      "regex": "^/user/home(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/user/home(?:/)?$"
    },
    {
      "page": "/user/orders",
      "regex": "^/user/orders(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/user/orders(?:/)?$"
    },
    {
      "page": "/user/payment",
      "regex": "^/user/payment(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/user/payment(?:/)?$"
    },
    {
      "page": "/user/profile",
      "regex": "^/user/profile(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/user/profile(?:/)?$"
    },
    {
      "page": "/user/recent",
      "regex": "^/user/recent(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/user/recent(?:/)?$"
    },
    {
      "page": "/user/settings",
      "regex": "^/user/settings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/user/settings(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}